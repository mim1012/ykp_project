# Production-ready PHP-FPM + Nginx for Railway
FROM php:8.3-fpm-alpine

WORKDIR /var/www/html

# Install system dependencies and PHP extensions
RUN apk add --no-cache \
    nginx \
    postgresql-dev \
    libzip-dev \
    icu-dev \
    supervisor \
    curl \
    && docker-php-ext-configure intl \
    && docker-php-ext-install pdo pdo_pgsql zip opcache intl \
    && rm -rf /var/cache/apk/*

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Copy application code
COPY . .

# Install PHP dependencies (include dev to avoid missing test dependencies)
RUN composer install --optimize-autoloader --no-scripts --no-interaction \
    && php -r "if (file_exists('vendor/nesbot/carbon/src/Carbon/Traits/Test.php')) unlink('vendor/nesbot/carbon/src/Carbon/Traits/Test.php');" \
    && mkdir -p vendor/nesbot/carbon/src/Carbon/Traits \
    && echo '<?php namespace Carbon\Traits; trait Test {}' > vendor/nesbot/carbon/src/Carbon/Traits/Test.php

# Fix permissions
RUN mkdir -p storage/logs storage/framework/cache storage/framework/sessions storage/framework/views bootstrap/cache \
    && chmod -R 777 storage bootstrap/cache

# Configure PHP-FPM with custom settings
RUN cat > /usr/local/etc/php-fpm.d/zz-docker.conf <<EOF
[global]
daemonize = no
error_log = /dev/stderr

[www]
listen = 127.0.0.1:9000
listen.owner = nginx
listen.group = nginx
listen.mode = 0660

user = nginx
group = nginx

pm = dynamic
pm.max_children = 50
pm.start_servers = 5
pm.min_spare_servers = 5
pm.max_spare_servers = 35

clear_env = no
catch_workers_output = yes
decorate_workers_output = no

php_admin_flag[log_errors] = on
php_admin_value[error_log] = /dev/stderr
EOF

# Ensure nginx user exists (skip if already exists)
RUN id -u nginx &>/dev/null || adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx

# Configure Nginx
COPY nginx.conf /etc/nginx/nginx.conf

# Create .env file
RUN cp .env.example .env || echo "APP_KEY=" > .env

# Supervisor configuration
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Copy and setup entrypoint
COPY docker-entrypoint-nginx.sh /usr/local/bin/docker-entrypoint.sh
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

EXPOSE 8080

# Start via entrypoint
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]