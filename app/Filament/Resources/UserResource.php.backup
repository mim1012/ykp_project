<?php

namespace App\Filament\Resources;

use App\Filament\Resources\UserResource\Pages;
use App\Models\User;
use App\Models\Branch;
use App\Models\Store;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Filament\Forms\Components\Section;
use Filament\Tables\Columns\BadgeColumn;
use Illuminate\Support\Facades\Hash;

class UserResource extends Resource
{
    protected static ?string $model = User::class;
    
    protected static ?string $modelLabel = '사용자';
    protected static ?string $pluralModelLabel = '사용자 관리';
    protected static ?string $navigationLabel = '사용자 관리';
    protected static ?string $navigationIcon = 'heroicon-o-users';
    protected static ?int $navigationSort = 1;

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Section::make('기본 정보')
                    ->description('사용자의 기본 정보를 입력하세요')
                    ->schema([
                        Forms\Components\TextInput::make('name')
                            ->label('이름')
                            ->required()
                            ->maxLength(255),
                            
                        Forms\Components\TextInput::make('email')
                            ->label('이메일')
                            ->email()
                            ->required()
                            ->unique(User::class, 'email', ignoreRecord: true)
                            ->maxLength(255),
                            
                        Forms\Components\TextInput::make('password')
                            ->label('비밀번호')
                            ->password()
                            ->required(fn (string $operation): bool => $operation === 'create')
                            ->minLength(8)
                            ->dehydrateStateUsing(fn ($state) => Hash::make($state))
                            ->dehydrated(fn ($state) => filled($state))
                            ->helperText('수정 시 비워두면 기존 비밀번호가 유지됩니다'),
                    ])->columns(1),
                    
                Section::make('권한 및 소속')
                    ->description('사용자의 역할과 소속을 설정하세요')
                    ->schema([
                        Forms\Components\Select::make('role')
                            ->label('역할')
                            ->options([
                                'headquarters' => '🏢 본사 관리자',
                                'branch' => '🏪 지사 관리자', 
                                'store' => '🏬 매장 직원',
                            ])
                            ->required()
                            ->reactive(),
                            
                        Forms\Components\Select::make('branch_id')
                            ->label('소속 지사')
                            ->options(Branch::all()->pluck('name', 'id'))
                            ->searchable()
                            ->preload()
                            ->visible(fn (Forms\Get $get) => in_array($get('role'), ['branch', 'store']))
                            ->required(fn (Forms\Get $get) => in_array($get('role'), ['branch', 'store']))
                            ->reactive(),
                            
                        Forms\Components\Select::make('store_id')
                            ->label('소속 매장')
                            ->options(function (Forms\Get $get) {
                                $branchId = $get('branch_id');
                                if (!$branchId) {
                                    return [];
                                }
                                return Store::where('branch_id', $branchId)->pluck('name', 'id');
                            })
                            ->searchable()
                            ->visible(fn (Forms\Get $get) => $get('role') === 'store')
                            ->required(fn (Forms\Get $get) => $get('role') === 'store'),
                            
                        Forms\Components\Select::make('status')
                            ->label('상태')
                            ->options([
                                'active' => '✅ 활성',
                                'inactive' => '⏸️ 비활성',
                                'suspended' => '🚫 정지',
                            ])
                            ->default('active')
                            ->required(),
                    ])->columns(2),
                    
                Section::make('추가 정보')
                    ->schema([
                        Forms\Components\Textarea::make('notes')
                            ->label('메모')
                            ->rows(3)
                            ->placeholder('관리자 메모 (선택사항)'),
                    ]),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('name')
                    ->label('이름')
                    ->searchable()
                    ->sortable()
                    ->weight('semibold'),
                    
                Tables\Columns\TextColumn::make('email')
                    ->label('이메일')
                    ->searchable()
                    ->copyable(),
                    
                BadgeColumn::make('role')
                    ->label('역할')
                    ->colors([
                        'primary' => 'headquarters',
                        'success' => 'branch',
                        'info' => 'store',
                    ])
                    ->formatStateUsing(fn (string $state): string => match ($state) {
                        'headquarters' => '본사',
                        'branch' => '지사',
                        'store' => '매장',
                        default => $state,
                    }),
                    
                Tables\Columns\TextColumn::make('branch.name')
                    ->label('소속지사')
                    ->badge()
                    ->color('secondary')
                    ->placeholder('본사 직속'),
                    
                Tables\Columns\TextColumn::make('store.name')
                    ->label('소속매장')
                    ->badge()
                    ->color('gray')
                    ->placeholder('-'),
                    
                BadgeColumn::make('status')
                    ->label('상태')
                    ->colors([
                        'success' => 'active',
                        'warning' => 'inactive',
                        'danger' => 'suspended',
                    ])
                    ->formatStateUsing(fn (string $state): string => match ($state) {
                        'active' => '활성',
                        'inactive' => '비활성',
                        'suspended' => '정지',
                        default => $state,
                    }),
                    
                Tables\Columns\TextColumn::make('created_at')
                    ->label('등록일')
                    ->dateTime('Y-m-d H:i')
                    ->sortable()
                    ->toggleable(),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('role')
                    ->label('역할')
                    ->options([
                        'headquarters' => '본사',
                        'branch' => '지사',
                        'store' => '매장',
                    ]),
                    
                Tables\Filters\SelectFilter::make('branch_id')
                    ->label('지사')
                    ->relationship('branch', 'name'),
                    
                Tables\Filters\SelectFilter::make('status')
                    ->label('상태')
                    ->options([
                        'active' => '활성',
                        'inactive' => '비활성',
                        'suspended' => '정지',
                    ]),
            ])
            ->actions([
                Tables\Actions\ViewAction::make(),
                Tables\Actions\EditAction::make(),
                
                Tables\Actions\Action::make('reset_password')
                    ->label('비밀번호 재설정')
                    ->icon('heroicon-o-key')
                    ->color('warning')
                    ->form([
                        Forms\Components\TextInput::make('new_password')
                            ->label('새 비밀번호')
                            ->password()
                            ->required()
                            ->minLength(8),
                    ])
                    ->action(function (User $record, array $data) {
                        $record->update([
                            'password' => Hash::make($data['new_password'])
                        ]);
                        
                        \Filament\Notifications\Notification::make()
                            ->title('비밀번호가 재설정되었습니다')
                            ->success()
                            ->send();
                    })
                    ->requiresConfirmation(),
                    
                Tables\Actions\Action::make('toggle_status')
                    ->label(fn (User $record) => $record->status === 'active' ? '비활성화' : '활성화')
                    ->icon(fn (User $record) => $record->status === 'active' ? 'heroicon-o-pause' : 'heroicon-o-play')
                    ->color(fn (User $record) => $record->status === 'active' ? 'warning' : 'success')
                    ->action(function (User $record) {
                        $newStatus = $record->status === 'active' ? 'inactive' : 'active';
                        $record->update(['status' => $newStatus]);
                        
                        \Filament\Notifications\Notification::make()
                            ->title('사용자 상태가 변경되었습니다')
                            ->success()
                            ->send();
                    })
                    ->requiresConfirmation(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ])
            ->defaultSort('created_at', 'desc');
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListUsers::route('/'),
            'create' => Pages\CreateUser::route('/create'),
            'view' => Pages\ViewUser::route('/{record}'),
            'edit' => Pages\EditUser::route('/{record}/edit'),
        ];
    }
    
    public static function getNavigationBadge(): ?string
    {
        return static::getModel()::count();
    }
    
    public static function canAccess(): bool
    {
        return auth()->user()?->isHeadquarters() ?? false;
    }
}