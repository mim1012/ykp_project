<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <title>Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ Î∞è Î∂ÑÏÑù - YKP ERP</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdn.jsdelivr.net/gh/orioncactus/pretendardvariable/dist/web/variable/pretendardvariable.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/date-fns@2.29.3/index.umd.min.js"></script>
    <style>
        .stat-card { transition: all 0.3s ease; }
        .stat-card:hover { transform: translateY(-4px); box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1); }
        .gradient-bg { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
        .chart-container { position: relative; height: 300px; }
    </style>
</head>
<body class="bg-gray-50 font-pretendard">
    <!-- Ìó§Îçî -->
    <header class="bg-white shadow-sm border-b">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between h-16">
                <div class="flex items-center">
                    <h1 class="text-xl font-semibold text-gray-900">Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ Î∞è Î∂ÑÏÑù</h1>
                    <span class="ml-2 px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded" id="store-filter-badge" style="display: none;">Îß§Ïû•Î≥Ñ Î≥¥Í∏∞</span>
                </div>
                <div class="flex items-center space-x-4">
                    <select id="period-selector" class="border rounded px-3 py-1 text-sm">
                        <option value="7">ÏµúÍ∑º 7Ïùº</option>
                        <option value="30" selected>ÏµúÍ∑º 30Ïùº</option>
                        <option value="90">ÏµúÍ∑º 90Ïùº</option>
                        <option value="365">ÏµúÍ∑º 1ÎÖÑ</option>
                    </select>
                    <button onclick="exportReport()" class="text-green-600 hover:text-green-800">üìä Î≥¥Í≥†ÏÑú ÎÇ¥Î≥¥ÎÇ¥Í∏∞</button>
                    <a href="/dashboard" class="text-gray-600 hover:text-gray-900">ÎåÄÏãúÎ≥¥Îìú</a>
                </div>
            </div>
        </div>
    </header>

    <main class="max-w-7xl mx-auto py-6 px-4" id="main-content" style="opacity: 0; transition: opacity 0.3s ease-in;">
        <!-- ÌïµÏã¨ ÏßÄÌëú Ïπ¥Îìú -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            <!-- Ï¥ù Îß§Ï∂ú -->
            <div class="stat-card bg-gradient-to-r from-blue-500 to-blue-600 text-white p-6 rounded-xl shadow-lg">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-blue-100 text-sm font-medium">
                            Ï¥ù Îß§Ï∂ú <span id="revenue-period" class="text-blue-200">(ÏµúÍ∑º 30Ïùº)</span>
                        </p>
                        <p class="text-2xl font-bold" id="total-revenue">Î°úÎî© Ï§ë...</p>
                        <p class="text-blue-200 text-xs mt-1" id="revenue-growth">Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ï§ë...</p>
                    </div>
                    <div class="bg-blue-400 bg-opacity-30 p-3 rounded-full">
                        <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M2 11a1 1 0 011-1h2a1 1 0 011 1v5a1 1 0 01-1 1H3a1 1 0 01-1-1v-5zM8 7a1 1 0 011-1h2a1 1 0 011 1v9a1 1 0 01-1 1H9a1 1 0 01-1-1V7zM14 4a1 1 0 011-1h2a1 1 0 011 1v12a1 1 0 01-1 1h-2a1 1 0 01-1-1V4z"></path>
                        </svg>
                    </div>
                </div>
            </div>

            <!-- Ï¥ù Í∞úÌÜµ Í±¥Ïàò -->
            <div class="stat-card bg-gradient-to-r from-purple-500 to-purple-600 text-white p-6 rounded-xl shadow-lg">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-purple-100 text-sm font-medium">Ï¥ù Í∞úÌÜµ Í±¥Ïàò</p>
                        <p class="text-2xl font-bold" id="total-activations">Î°úÎî© Ï§ë...</p>
                        <p class="text-purple-200 text-xs mt-1" id="avg-daily">Í≥ÑÏÇ∞ Ï§ë...</p>
                    </div>
                    <div class="bg-purple-400 bg-opacity-30 p-3 rounded-full">
                        <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z"></path>
                        </svg>
                    </div>
                </div>
            </div>

            <!-- ÌôúÏÑ± Îß§Ïû• Ïàò -->
            <div class="stat-card bg-gradient-to-r from-orange-500 to-red-500 text-white p-6 rounded-xl shadow-lg">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-orange-100 text-sm font-medium">ÌôúÏÑ± Îß§Ïû•</p>
                        <p class="text-2xl font-bold" id="active-stores">Î°úÎî© Ï§ë...</p>
                        <p class="text-orange-200 text-xs mt-1" id="store-growth">Í≥ÑÏÇ∞ Ï§ë...</p>
                    </div>
                    <div class="bg-orange-400 bg-opacity-30 p-3 rounded-full">
                        <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M19 7l-.867 12.142A2 2 0 0116.138 21H3.862a2 2 0 01-1.995-1.858L1 7m18 0l-2-4H3l-2 4m18 0v11a1 1 0 01-1 1h-1M1 7v11a1 1 0 001 1h1m0-18h14l2 4H3l2-4z"></path>
                        </svg>
                    </div>
                </div>
            </div>
        </div>

        <!-- Ï∞®Ìä∏ ÏÑπÏÖò -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
            <!-- Îß§Ï∂ú Ï∂îÏù¥ Ï∞®Ìä∏ -->
            <div class="bg-white rounded-xl shadow-lg p-6">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">üìà Îß§Ï∂ú Ï∂îÏù¥</h3>
                    <select id="chart-type" class="text-sm border rounded px-2 py-1">
                        <option value="daily">ÏùºÎ≥Ñ</option>
                        <option value="weekly">Ï£ºÎ≥Ñ</option>
                        <option value="monthly">ÏõîÎ≥Ñ</option>
                    </select>
                </div>
                <div class="chart-container">
                    <canvas id="revenue-trend-chart"></canvas>
                </div>
            </div>

            <!-- ÌÜµÏã†ÏÇ¨Î≥Ñ Ï†êÏú†Ïú® -->
            <div class="bg-white rounded-xl shadow-lg p-6">
                <div class="flex items-center justify-between mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">üìä ÌÜµÏã†ÏÇ¨Î≥Ñ Ï†êÏú†Ïú®</h3>
                    <button onclick="refreshCarrierData()" class="text-sm text-blue-600 hover:text-blue-800">ÏÉàÎ°úÍ≥†Ïπ®</button>
                </div>
                <div class="chart-container">
                    <canvas id="carrier-pie-chart"></canvas>
                </div>
            </div>
        </div>

        <!-- ÏÉÅÏÑ∏ Î∂ÑÏÑù -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
            <!-- ÏßÄÏÇ¨Î≥Ñ ÏÑ±Í≥º -->
            <div class="lg:col-span-2 bg-white rounded-xl shadow-lg p-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">üè¢ ÏßÄÏÇ¨Î≥Ñ ÏÑ±Í≥º</h3>
                <div class="overflow-x-auto">
                    <table class="min-w-full">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">ÏßÄÏÇ¨Î™Ö</th>
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Îß§Ïû•Ïàò</th>
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Îß§Ï∂ú</th>
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Í∞úÌÜµÍ±¥Ïàò</th>
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">ÌèâÍ∑†Îã®Í∞Ä</th>
                                <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">ÏÑ±Ïû•Î•†</th>
                            </tr>
                        </thead>
                        <tbody id="branch-performance" class="bg-white divide-y divide-gray-200">
                            <!-- ÎèôÏ†ÅÏúºÎ°ú Î°úÎìúÎê® -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Top ÏÑ±Í≥º Îß§Ïû• -->
            <div class="bg-white rounded-xl shadow-lg p-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">üèÜ Top ÏÑ±Í≥º Îß§Ïû•</h3>
                <div id="top-stores" class="space-y-3">
                    <!-- ÎèôÏ†ÅÏúºÎ°ú Î°úÎìúÎê® -->
                </div>
            </div>
        </div>

        <!-- Î™©Ìëú ÎåÄÎπÑ ÏßÑÏ≤ôÎèÑ -->
        <div class="grid grid-cols-1 gap-6">
            <!-- Î™©Ìëú ÎåÄÎπÑ ÏßÑÏ≤ôÎèÑ -->
            <div class="bg-white rounded-xl shadow-lg p-6">
                <h3 class="text-lg font-semibold text-gray-900 mb-4">üéØ Î™©Ìëú Îã¨ÏÑ±Î•†</h3>
                <div class="space-y-4">
                    <div>
                        <div class="flex justify-between items-center mb-1">
                            <span class="text-sm font-medium text-gray-700">Ïõî Îß§Ï∂ú Î™©Ìëú</span>
                            <span class="text-sm text-gray-600" id="monthly-target-percent">0%</span>
                        </div>
                        <div class="w-full bg-gray-200 rounded-full h-2">
                            <div class="bg-blue-600 h-2 rounded-full transition-all duration-300" id="monthly-progress" style="width: 0%"></div>
                        </div>
                        <p class="text-xs text-gray-500 mt-1" id="monthly-target-text">‚Ç©0 / ‚Ç©50,000,000</p>
                    </div>

                    <div>
                        <div class="flex justify-between items-center mb-1">
                            <span class="text-sm font-medium text-gray-700">Í∞úÌÜµ Í±¥Ïàò Î™©Ìëú</span>
                            <span class="text-sm text-gray-600" id="activation-target-percent">0%</span>
                        </div>
                        <div class="w-full bg-gray-200 rounded-full h-2">
                            <div class="bg-green-600 h-2 rounded-full transition-all duration-300" id="activation-progress" style="width: 0%"></div>
                        </div>
                        <p class="text-xs text-gray-500 mt-1" id="activation-target-text">0Í±¥ / 200Í±¥</p>
                    </div>

                    <div>
                        <div class="flex justify-between items-center mb-1">
                            <span class="text-sm font-medium text-gray-700">ÏàòÏùµÎ•† Î™©Ìëú</span>
                            <span class="text-sm text-gray-600" id="profit-target-percent">0%</span>
                        </div>
                        <div class="w-full bg-gray-200 rounded-full h-2">
                            <div class="bg-purple-600 h-2 rounded-full transition-all duration-300" id="profit-rate-progress" style="width: 0%"></div>
                        </div>
                        <p class="text-xs text-gray-500 mt-1" id="profit-target-text">0% / 60%</p>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Î°úÎî© Ïò§Î≤ÑÎ†àÏù¥ -->
    <div id="loading-overlay" class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50" style="display: none;">
        <div class="bg-white rounded-lg p-6 flex items-center space-x-3">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
            <span class="text-gray-700">Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</span>
        </div>
    </div>

    <!-- ÌÜ†Ïä§Ìä∏ Î©îÏãúÏßÄ -->
    <div id="toast" class="fixed top-4 right-4 z-50" style="display: none;">
        <div class="bg-white border border-gray-200 rounded-lg shadow-lg p-4 min-w-64">
            <div class="flex items-center">
                <div id="toast-icon" class="mr-3"></div>
                <div id="toast-message" class="text-sm font-medium"></div>
            </div>
        </div>
    </div>

    <script>
        // Ï†ÑÏó≠ Î≥ÄÏàò
        let currentPeriod = 30;
        let charts = {};
        let storeFilter = null; // Îß§Ïû• ÌïÑÌÑ∞
        let userRole = null; // ÏÇ¨Ïö©Ïûê Í∂åÌïú (Ï†ÑÏó≠)

        // ÌéòÏù¥ÏßÄ Î°úÎìúÏãú Ï¥àÍ∏∞Ìôî
        document.addEventListener('DOMContentLoaded', function() {
            // URL ÌååÎùºÎØ∏ÌÑ∞ÏóêÏÑú Îß§Ïû• ÌïÑÌÑ∞ ÌôïÏù∏
            const urlParams = new URLSearchParams(window.location.search);
            const storeId = urlParams.get('store');
            const storeName = urlParams.get('name');
            userRole = urlParams.get('role'); // Ï†ÑÏó≠ Î≥ÄÏàòÏóê Ìï†Îãπ

            // Îß§Ïû• ÏßÅÏõê Í∂åÌïú Ï≤òÎ¶¨
            if (userRole === 'store' || window.userData?.role === 'store') {
                // Îß§Ïû• ÏßÅÏõêÏùÄ ÏûêÏã†Ïùò Îß§Ïû• Îç∞Ïù¥ÌÑ∞Îßå Ï†ëÍ∑º
                const myStoreId = storeId || window.userData?.store_id;
                const myStoreName = storeName || window.userData?.store_name || 'ÎÇ¥ Îß§Ïû•';

                if (myStoreId) {
                    storeFilter = { id: myStoreId, name: myStoreName };
                    document.getElementById('store-filter-badge').style.display = 'inline-block';
                    document.getElementById('store-filter-badge').textContent = `${myStoreName} ÏÑ±Í≥º Î∂ÑÏÑù`;
                    document.querySelector('h1').textContent = `${myStoreName} Îß§Ïû• ÏÑ±Í≥º ÎåÄÏãúÎ≥¥Îìú`;

                    // Îß§Ïû• ÏßÅÏõêÏö© ÏïàÎÇ¥ Î©îÏãúÏßÄ Ï∂îÍ∞Ä
                    const pageHeader = document.querySelector('header');
                    if (pageHeader) {
                        const storeNotice = document.createElement('div');
                        storeNotice.className = 'bg-green-50 border-l-4 border-green-400 p-4 mb-6';
                        storeNotice.innerHTML = `
                            <div class="flex">
                                <div class="flex-shrink-0">
                                    <svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                                    </svg>
                                </div>
                                <div class="ml-3">
                                    <p class="text-sm text-green-700">
                                        <strong>${myStoreName} Îß§Ïû• Ï†ÑÏö© ÌÜµÍ≥Ñ</strong> - Ïã§ÏãúÍ∞Ñ ÏÑ±Í≥º Îç∞Ïù¥ÌÑ∞Î•º ÌôïÏù∏ÌïòÍ≥† ÏÑ±Ïû• Ï∂îÏù¥Î•º Î∂ÑÏÑùÌï† Ïàò ÏûàÏäµÎãàÎã§.
                                    </p>
                                </div>
                            </div>
                        `;
                        pageHeader.after(storeNotice);
                    }

                    console.log(`üìä Îß§Ïû• ÏßÅÏõê ÌÜµÍ≥Ñ Î™®Îìú: ${myStoreName} (ID: ${myStoreId})`);
                } else {
                    console.warn('‚ö†Ô∏è Îß§Ïû• Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏùå');
                }
            } else if (storeId && storeName) {
                // ÏùºÎ∞ò Îß§Ïû• ÌïÑÌÑ∞ (Î≥∏ÏÇ¨/ÏßÄÏÇ¨ Í¥ÄÎ¶¨ÏûêÏö©)
                storeFilter = { id: storeId, name: storeName };
                document.getElementById('store-filter-badge').style.display = 'inline-block';
                document.getElementById('store-filter-badge').textContent = `${storeName} Îß§Ïû• ÌÜµÍ≥Ñ`;
                document.querySelector('h1').textContent = `${storeName} Îß§Ïû• ÌÜµÍ≥Ñ Î∂ÑÏÑù`;
            }

            initializePage();
            setupEventListeners();
        });

        // Í∏∞Í∞Ñ ÌÖçÏä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò
        function updatePeriodText(days) {
            const periodText = {
                7: 'ÏµúÍ∑º 7Ïùº',
                30: 'ÏµúÍ∑º 30Ïùº',
                90: 'ÏµúÍ∑º 90Ïùº',
                365: 'ÏµúÍ∑º 1ÎÖÑ'
            }[days] || `ÏµúÍ∑º ${days}Ïùº`;

            document.getElementById('revenue-period').textContent = `(${periodText})`;
        }

        // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
        function setupEventListeners() {
            document.getElementById('period-selector').addEventListener('change', function() {
                currentPeriod = parseInt(this.value);
                updatePeriodText(currentPeriod);  // Í∏∞Í∞Ñ ÌÖçÏä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
                loadAllData();
            });

            document.getElementById('chart-type').addEventListener('change', function() {
                updateRevenueChart();
            });
        }

        // ÌéòÏù¥ÏßÄ Ï¥àÍ∏∞Ìôî
        function initializePage() {
            updatePeriodText(currentPeriod);  // Ï¥àÍ∏∞ Í∏∞Í∞Ñ ÌÖçÏä§Ìä∏ ÏÑ§Ï†ï
            showLoading();
            loadAllData();
        }

        // Î™®Îì† Îç∞Ïù¥ÌÑ∞ Î°úÎìú
        async function loadAllData() {
            try {
                // Î™®Îì† Í≥ÑÏ†ïÏóêÏÑú Î™®Îì† Îç∞Ïù¥ÌÑ∞ Î°úÎìú (Í∂åÌïúÎ≥Ñ ÌïÑÌÑ∞ÎßÅÏùÄ Î∞±ÏóîÎìúÏóêÏÑú Ï≤òÎ¶¨)
                await Promise.all([
                    loadKPIData(),
                    loadChartData(),
                    loadBranchPerformance(),
                    loadTopStores(),
                    loadGoalProgress()
                ]);
                hideLoading();
            } catch (error) {
                console.error('Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
                hideLoading();
                // ÏóêÎü¨ Î∞úÏÉù Ïãú Îç∞Î™® Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±ÌïòÏßÄ ÏïäÏùå (Î¨¥Ìïú Î£®ÌîÑ Î∞©ÏßÄ)
                showToast('Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. ÌéòÏù¥ÏßÄÎ•º ÏÉàÎ°úÍ≥†Ïπ®Ìï¥Ï£ºÏÑ∏Ïöî.', 'error');
            }
        }

        // KPI Îç∞Ïù¥ÌÑ∞ Î°úÎìú
        // üõ°Ô∏è ÏïàÏ†ÑÌïú KPI Îç∞Ïù¥ÌÑ∞ Î°úÎìú (Îß§Ïû• ID Í≤ÄÏ¶ù + ÏóêÎü¨ Ï≤òÎ¶¨)
        async function loadKPIData() {
            try {
                // storeFilter.idÍ∞Ä Í∞ùÏ≤¥ÎÇò Î∞∞Ïó¥Ïù¥ ÏïÑÎãå Ïà´Ïûê/Î¨∏ÏûêÏó¥Ïù∏ÏßÄ ÌôïÏù∏
                let storeParam = '';
                if (storeFilter && storeFilter.id) {
                    const storeId = typeof storeFilter.id === 'object' ?
                        (storeFilter.id.id || storeFilter.id.value || String(storeFilter.id)) :
                        storeFilter.id;
                    storeParam = `&store=${storeId}`;
                }
                const url = `/api/statistics/kpi?days=${currentPeriod}${storeParam}`;

                console.log('üì° KPI API Ìò∏Ï∂ú:', url);
                console.log('üîç storeFilter:', storeFilter);

                const response = await fetch(url);

                // Content-Type Í≤ÄÏ¶ù
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    const htmlText = await response.text();
                    console.error('‚ùå APIÍ∞Ä HTML Î∞òÌôò:', htmlText.substring(0, 200));

                    if (htmlText.includes('404') || htmlText.includes('Not Found')) {
                        throw new Error('Îß§Ïû•ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. Îß§Ïû• IDÎ•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
                    } else {
                        throw new Error('API ÏÑúÎ≤Ñ Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
                    }
                }

                const result = await response.json();

                if (result.success) {
                    // Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
                    updateKPICards(result.data);
                    console.log('‚úÖ KPI Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏÑ±Í≥µ:', result.data);
                } else {
                    // API Ïò§Î•ò Ï≤òÎ¶¨
                    if (result.available_stores) {
                        console.log('üí° ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Îß§Ïû•Îì§:', result.available_stores);
                        showToast(`Îß§Ïû• ID ${result.requested_store_id}Í∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§. Îã§Î•∏ Îß§Ïû•ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.`, 'error');
                    } else {
                        throw new Error(result.error || 'KPI Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®');
                    }
                }
            } catch (error) {
                console.error('‚ùå KPI API Ìò∏Ï∂ú Ïã§Ìå®:', error);

                // ÏóêÎü¨ Ï¢ÖÎ•òÎ≥Ñ Ï≤òÎ¶¨
                if (error.message.includes('Îß§Ïû•ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§')) {
                    const emptyKPI = {
                        total_revenue: 0,
                        total_activations: 0,
                        avg_daily: 0,
                        active_stores: 0,
                        store_growth: 0,
                        revenue_growth: 0,
                        message: 'Îß§Ïû• Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'
                    };
                    updateKPICards(emptyKPI);
                    showToast('Îß§Ïû• Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.', 'warning');
                } else {
                    // ÏùºÎ∞ò Ïò§Î•ò
                    const errorKPI = {
                        total_revenue: 0,
                        total_activations: 0,
                        avg_daily: 0,
                        active_stores: 0,
                        store_growth: 0,
                        revenue_growth: 0,
                        message: 'Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.'
                    };
                    updateKPICards(errorKPI);
                    showToast('ÌÜµÍ≥Ñ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.', 'error');
                }
            }
        }

        // KPI Ïπ¥Îìú ÏóÖÎç∞Ïù¥Ìä∏
        function updateKPICards(data) {
            document.getElementById('total-revenue').textContent = formatCurrency(data.total_revenue);
            document.getElementById('total-activations').textContent = `${data.total_activations}Í±¥`;
            document.getElementById('avg-daily').textContent = `ÏùºÌèâÍ∑†: ${data.avg_daily}Í±¥`;
            document.getElementById('active-stores').textContent = `${data.active_stores}Í∞ú`;
            document.getElementById('store-growth').textContent = `Ïã†Í∑ú: +${data.store_growth}Í∞ú`;
            document.getElementById('revenue-growth').textContent = `Ï†ÑÏ£º ÎåÄÎπÑ +${data.revenue_growth}%`;
        }

        // Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
        async function loadChartData() {
            // Îß§Ï∂ú Ï∂îÏù¥ Ï∞®Ìä∏
            await updateRevenueChart();
            // ÌÜµÏã†ÏÇ¨ Ï†êÏú†Ïú® Ï∞®Ìä∏
            await updateCarrierChart();
        }

        // Îß§Ï∂ú Ï∂îÏù¥ Ï∞®Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
        async function updateRevenueChart() {
            const chartType = document.getElementById('chart-type').value;
            
            try {
                const storeParam = storeFilter ? `&store=${storeFilter.id}` : '';
                const response = await fetch(`/api/statistics/revenue-trend?days=${currentPeriod}&type=${chartType}${storeParam}`);
                const result = await response.json();
                
                if (result.success) {
                    renderRevenueChart(result.data);
                } else {
                    throw new Error('Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®');
                }
            } catch (error) {
                // DB Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå® Ïãú ÏóêÎü¨ ÌëúÏãú (demoData Ï†úÍ±∞)
                console.error('Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
                document.getElementById('revenue-trend-chart').innerHTML = '<p class="text-red-500 text-center p-4">Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§. Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌïòÏÑ∏Ïöî.</p>';
            }
        }

        // demoData ÏôÑÏ†Ñ Ï†úÍ±∞ - PM ÏöîÍµ¨ÏÇ¨Ìï≠ Î∞òÏòÅ

        // Îß§Ï∂ú Ï∞®Ìä∏ Î†åÎçîÎßÅ
        function renderRevenueChart(data) {
            const ctx = document.getElementById('revenue-trend-chart').getContext('2d');
            
            if (charts.revenueChart) {
                charts.revenueChart.destroy();
            }

            charts.revenueChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: data.labels,
                    datasets: [{
                        label: 'Îß§Ï∂ú',
                        data: data.revenue_data,
                        borderColor: 'rgb(59, 130, 246)',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return formatCurrency(value);
                                }
                            }
                        }
                    }
                }
            });
        }

        // ÌÜµÏã†ÏÇ¨ Ï∞®Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
        async function updateCarrierChart() {
            try {
                const storeParam = storeFilter ? `&store=${storeFilter.id}` : '';
                const response = await fetch(`/api/statistics/carrier-breakdown?days=${currentPeriod}${storeParam}`);
                const result = await response.json();
                
                if (result.success) {
                    renderCarrierChart(result.data);
                } else {
                    throw new Error('ÌÜµÏã†ÏÇ¨ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®');
                }
            } catch (error) {
                console.error('ÌÜµÏã†ÏÇ¨ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
                // API Ïã§Ìå® Ïãú Îπà Ï∞®Ìä∏ ÌëúÏãú (Îç∞Î™® Îç∞Ïù¥ÌÑ∞ Ï†úÍ±∞)
                const emptyCarrierData = {
                    labels: ['Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå'],
                    data: [100],
                    colors: ['#CCCCCC']
                };
                renderCarrierChart(emptyCarrierData);
            }
        }

        // ÌÜµÏã†ÏÇ¨ Ï∞®Ìä∏ Î†åÎçîÎßÅ
        function renderCarrierChart(data) {
            const ctx = document.getElementById('carrier-pie-chart').getContext('2d');
            
            if (charts.carrierChart) {
                charts.carrierChart.destroy();
            }

            charts.carrierChart = new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: data.labels,
                    datasets: [{
                        data: data.data,
                        backgroundColor: data.colors,
                        borderWidth: 2,
                        borderColor: '#fff'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom',
                        }
                    }
                }
            });
        }

        // ÏßÄÏÇ¨Î≥Ñ ÏÑ±Í≥º Î°úÎìú
        async function loadBranchPerformance() {
            try {
                const storeParam = storeFilter ? `&store=${storeFilter.id}` : '';
                const response = await fetch(`/api/statistics/branch-performance?days=${currentPeriod}${storeParam}`);
                const result = await response.json();
                
                if (result.success) {
                    renderBranchPerformance(result.data);
                } else {
                    throw new Error('ÏßÄÏÇ¨ ÏÑ±Í≥º Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®');
                }
            } catch (error) {
                console.error('ÏßÄÏÇ¨ ÏÑ±Í≥º Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
                // API Ïã§Ìå® Ïãú Îπà ÌÖåÏù¥Î∏î ÌëúÏãú (Îç∞Î™® Îç∞Ïù¥ÌÑ∞ Ï†úÍ±∞)
                const emptyBranches = [];
                renderBranchPerformance(emptyBranches);
                showToast('ÏßÄÏÇ¨Î≥Ñ ÏÑ±Í≥º Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.', 'error');
            }
        }

        // ÏßÄÏÇ¨Î≥Ñ ÏÑ±Í≥º Î†åÎçîÎßÅ
        function renderBranchPerformance(branches) {
            const tbody = document.getElementById('branch-performance');
            tbody.innerHTML = branches.map(branch => {
                const growthClass = branch.growth > 0 ? 'text-green-600' : 'text-red-600';
                const growthIcon = branch.growth > 0 ? '‚ñ≤' : '‚ñº';
                
                return `
                    <tr class="hover:bg-gray-50">
                        <td class="px-4 py-3 font-medium text-gray-900">${branch.name}</td>
                        <td class="px-4 py-3 text-gray-600">${branch.stores}Í∞ú</td>
                        <td class="px-4 py-3 text-gray-900 font-semibold">${formatCurrency(branch.revenue)}</td>
                        <td class="px-4 py-3 text-gray-600">${branch.activations}Í±¥</td>
                        <td class="px-4 py-3 text-gray-600">${formatCurrency(branch.avg_price)}</td>
                        <td class="px-4 py-3 ${growthClass} font-medium">${growthIcon} ${Math.abs(branch.growth)}%</td>
                    </tr>
                `;
            }).join('');
        }

        // Top Îß§Ïû• Î°úÎìú
        async function loadTopStores() {
            try {
                const storeParam = storeFilter ? `&store=${storeFilter.id}` : '';
                const response = await fetch(`/api/statistics/top-stores?days=${currentPeriod}${storeParam}`);
                const result = await response.json();
                
                if (result.success) {
                    renderTopStores(result.data);
                } else {
                    throw new Error('Top Îß§Ïû• Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®');
                }
            } catch (error) {
                console.error('Top Îß§Ïû• Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
                // API Ïã§Ìå® Ïãú Îπà Î™©Î°ù ÌëúÏãú (Îç∞Î™® Îç∞Ïù¥ÌÑ∞ Ï†úÍ±∞)
                const emptyStores = [];
                renderTopStores(emptyStores);
                showToast('Top Îß§Ïû• Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.', 'error');
            }
        }

        // Top Îß§Ïû• Î†åÎçîÎßÅ
        function renderTopStores(stores) {
            const container = document.getElementById('top-stores');
            container.innerHTML = stores.map(store => {
                const rankColors = ['text-yellow-600', 'text-gray-600', 'text-orange-600', 'text-blue-600', 'text-purple-600'];
                const rankIcons = ['ü•á', 'ü•à', 'ü•â', '4Ô∏è‚É£', '5Ô∏è‚É£'];
                
                return `
                    <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                        <div class="flex items-center">
                            <span class="text-xl mr-3">${rankIcons[store.rank - 1]}</span>
                            <div>
                                <p class="font-medium text-gray-900">${store.name}</p>
                                <p class="text-sm text-gray-600">${formatCurrency(store.revenue)}</p>
                            </div>
                        </div>
                        <span class="${rankColors[store.rank - 1]} font-bold text-lg">#${store.rank}</span>
                    </div>
                `;
            }).join('');
        }

        // Î™©Ìëú ÏßÑÏ≤ôÎèÑ Î°úÎìú
        async function loadGoalProgress() {
            try {
                const storeParam = storeFilter ? `?store=${storeFilter.id}` : '';
                const response = await fetch(`/api/statistics/goal-progress${storeParam}`);
                const result = await response.json();
                
                if (result.success) {
                    updateGoalProgress(result.data);
                } else {
                    throw new Error('Î™©Ìëú ÏßÑÏ≤ôÎèÑ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®');
                }
            } catch (error) {
                console.error('Î™©Ìëú ÏßÑÏ≤ôÎèÑ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
                // API Ïã§Ìå® Ïãú 0% ÌëúÏãú (Îç∞Î™® Îç∞Ïù¥ÌÑ∞ Ï†úÍ±∞)
                const emptyGoals = {
                    monthly_revenue: { current: 0, target: 50000000 },
                    monthly_activations: { current: 0, target: 200 },
                    profit_rate: { current: 0, target: 60.0 }
                };
                updateGoalProgress(emptyGoals);
                showToast('Î™©Ìëú ÏßÑÏ≤ôÎèÑ Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.', 'error');
            }
        }

        // Î™©Ìëú ÏßÑÏ≤ôÎèÑ ÏóÖÎç∞Ïù¥Ìä∏
        function updateGoalProgress(goals) {
            // Ïõî Îß§Ï∂ú Î™©Ìëú
            const revenuePercent = Math.min((goals.monthly_revenue.current / goals.monthly_revenue.target) * 100, 100);
            document.getElementById('monthly-target-percent').textContent = `${revenuePercent.toFixed(1)}%`;
            document.getElementById('monthly-progress').style.width = `${revenuePercent}%`;
            document.getElementById('monthly-target-text').textContent = 
                `${formatCurrency(goals.monthly_revenue.current)} / ${formatCurrency(goals.monthly_revenue.target)}`;

            // Í∞úÌÜµ Í±¥Ïàò Î™©Ìëú
            const activationPercent = Math.min((goals.monthly_activations.current / goals.monthly_activations.target) * 100, 100);
            document.getElementById('activation-target-percent').textContent = `${activationPercent.toFixed(1)}%`;
            document.getElementById('activation-progress').style.width = `${activationPercent}%`;
            document.getElementById('activation-target-text').textContent = 
                `${goals.monthly_activations.current}Í±¥ / ${goals.monthly_activations.target}Í±¥`;

            // ÏàòÏùµÎ•† Î™©Ìëú
            const profitPercent = Math.min((goals.profit_rate.current / goals.profit_rate.target) * 100, 100);
            document.getElementById('profit-target-percent').textContent = `${profitPercent.toFixed(1)}%`;
            document.getElementById('profit-rate-progress').style.width = `${profitPercent}%`;
            document.getElementById('profit-target-text').textContent = 
                `${goals.profit_rate.current}% / ${goals.profit_rate.target}%`;
        }

        // ÌÜµÏã†ÏÇ¨ Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®
        function refreshCarrierData() {
            showToast('ÌÜµÏã†ÏÇ¨ Îç∞Ïù¥ÌÑ∞Î•º ÏÉàÎ°úÍ≥†Ïπ®Ìï©ÎãàÎã§...', 'info');
            updateCarrierChart();
        }

        // Î≥¥Í≥†ÏÑú ÎÇ¥Î≥¥ÎÇ¥Í∏∞
        function exportReport() {
            showToast('ÌÜµÍ≥Ñ Î≥¥Í≥†ÏÑúÎ•º ÏÉùÏÑ±ÌïòÍ≥† ÏûàÏäµÎãàÎã§...', 'info');
            
            setTimeout(() => {
                showToast('Î≥¥Í≥†ÏÑúÍ∞Ä Îã§Ïö¥Î°úÎìúÎêòÏóàÏäµÎãàÎã§!', 'success');
            }, 2000);
        }

        // Îç∞Î™® Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
        function generateDemoData() {
            showToast('Îç∞Î™® Îç∞Ïù¥ÌÑ∞Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§...', 'info');
            loadAllData();
        }

        // Î°úÎî© ÌëúÏãú
        function showLoading() {
            document.getElementById('loading-overlay').style.display = 'flex';
        }

        // Î°úÎî© Ïà®ÍπÄ + ÏΩòÌÖêÏ∏† ÌéòÏù¥ÎìúÏù∏
        function hideLoading() {
            document.getElementById('loading-overlay').style.display = 'none';
            document.getElementById('main-content').style.opacity = '1';
        }

        // ÌÜµÌôî Ìè¨Îß∑ÌåÖ
        function formatCurrency(amount) {
            return '‚Ç©' + new Intl.NumberFormat('ko-KR').format(amount);
        }

        // ÌÜ†Ïä§Ìä∏ Î©îÏãúÏßÄ ÌëúÏãú
        function showToast(message, type = 'info') {
            const toast = document.getElementById('toast');
            const icon = document.getElementById('toast-icon');
            const messageEl = document.getElementById('toast-message');
            
            const icons = {
                success: '‚úÖ',
                error: '‚ùå',
                warning: '‚ö†Ô∏è',
                info: '‚ÑπÔ∏è'
            };
            
            icon.textContent = icons[type] || icons.info;
            messageEl.textContent = message;
            
            const colors = {
                success: 'border-green-200 bg-green-50',
                error: 'border-red-200 bg-red-50',
                warning: 'border-yellow-200 bg-yellow-50',
                info: 'border-blue-200 bg-blue-50'
            };
            
            toast.firstElementChild.className = `bg-white border rounded-lg shadow-lg p-4 min-w-64 ${colors[type] || colors.info}`;
            toast.style.display = 'block';
            
            setTimeout(() => {
                toast.style.display = 'none';
            }, 3000);
        }
    </script>
</body>
</html>